// Code generated by go-bindata.
// sources:
// migrations_gateway/01_init.sql
// migrations_compliance/01_init.sql
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations_gateway01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x41\x4f\xfb\x30\x0c\xc5\xef\xf9\x14\x3e\x6e\xfa\xff\x27\x01\xd2\xb8\xec\x54\x58\x90\x26\xca\x36\x4a\x7b\xd8\xa9\xca\x12\xab\x44\xb4\x49\x95\xb8\x65\x7c\x7b\x52\x24\x58\x1b\x0d\x8e\xd1\xef\xc5\xf6\x7b\xf6\x62\x01\xff\x1a\x5d\x39\x41\x08\x45\xcb\xee\x33\x9e\xe4\x1c\xf2\xe4\x2e\xe5\x90\xa1\x44\xdd\xa3\xda\x8b\x8f\x06\x0d\xc1\x8c\x01\x68\x05\x47\x5d\x79\x74\x5a\xd4\xff\xc3\xdb\xb6\x18\xfe\x6a\x6b\xca\x40\x7a\xe1\xe4\xab\x70\xb3\x9b\xe5\x72\x0e\xc5\x76\xf3\x5c\x70\xd8\xee\x72\xd8\x16\x69\x3a\x88\x5b\x67\x25\x7a\x8f\xaa\x14\x04\xa4\x1b\xf4\x24\x9a\x76\x2a\x11\x95\x36\x55\x49\xf6\x0d\xcd\xb4\xde\x58\x15\xfe\x51\xe7\x7f\xe7\xfb\x6c\xf3\x94\x64\x07\x78\xe4\x07\x98\x69\x35\x67\xf3\x15\x9b\x7a\x7b\x09\x86\x72\x27\x8c\x17\x72\x98\xfe\xdb\xdb\xd9\x58\xd4\xe2\xfa\x2a\x9a\xc0\x76\x4e\xe2\x0f\x5e\xde\x46\xb8\x3b\x36\x9a\xe8\x2f\xa7\xbe\x93\x12\x51\xc5\x92\x35\x7f\x48\x8a\xf4\x2c\xab\x51\x55\xe8\x86\xd0\x75\x58\x41\x4c\xd1\xf4\x58\x87\x1d\x94\x27\xe5\x80\xf0\x44\x93\x16\x0e\x7d\x57\xd3\x17\x9b\x44\x15\x57\xb9\x18\xd7\xf8\x32\xd6\xf6\xdd\xb0\x75\xb6\xdb\x5f\xbe\x8c\xd5\x98\x45\xc9\xae\xd8\x67\x00\x00\x00\xff\xff\x37\x1b\x93\xa7\x63\x02\x00\x00")

func migrations_gateway01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_gateway01_initSql,
		"migrations_gateway/01_init.sql",
	)
}

func migrations_gateway01_initSql() (*asset, error) {
	bytes, err := migrations_gateway01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_gateway/01_init.sql", size: 611, mode: os.FileMode(420), modTime: time.Unix(1472166336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations_compliance01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x5f\x6f\x82\x30\x14\xc5\xdf\xfb\x29\xee\xa3\x64\xfa\xb2\x4c\x5f\x7c\x62\x93\x25\x64\x0e\x1d\x81\x64\x3e\x91\xab\xed\xb4\x19\xa5\xa6\x96\xa9\xfb\xf4\x2b\xf3\x0f\xed\x14\xcc\x12\x5e\xe8\x3d\xf7\xde\x73\x7e\xd0\x5e\x0f\xee\x04\x5f\x2a\xd4\x0c\xd2\x35\x79\x8a\x03\x3f\x09\x20\xf1\x1f\xc7\x01\xf8\xa5\x5e\x49\xc5\xbf\x19\x4d\x14\x16\x1b\x5c\x68\x2e\x0b\xe8\x10\x00\x4e\x61\xce\x97\x1b\xa6\x38\xe6\x5d\xf3\xae\xeb\x7a\x66\x6a\x5f\xa8\x16\x2b\x54\x9d\xc1\x83\x07\x69\x14\xbe\xa5\x01\x44\x93\x04\xa2\x74\x3c\xae\xd4\x82\x09\xe9\x68\xec\xa2\x3d\x6a\x47\x15\x68\xb6\xd3\x8e\x00\xcf\xae\x32\xd4\xa0\xb9\x60\x1b\x8d\x62\xed\x68\x28\x6a\xbc\xec\x34\xcf\x34\x0e\x5f\xfd\x78\x06\x2f\xc1\x0c\x3a\x9c\x7a\xc4\x1b\x92\x3f\xa1\xf3\x5c\x6e\x19\x7d\x0e\xaf\x06\x2d\x50\xb0\xb3\xf5\xfb\x7e\xdf\xf5\x4e\xa5\x40\x5e\x34\xd7\xd7\xe5\x3c\xe7\x8b\xec\x93\xed\xe1\x57\xd0\x1f\xb8\x75\x3c\xec\x6e\xce\x75\x61\x9f\x78\x50\x07\x38\xa2\x0e\xa3\x51\xf0\x0e\xf8\xc1\xb3\xf9\x3e\x3b\x5a\x9a\x44\x76\xb0\xc3\xa1\x89\xde\xd2\x68\x79\x75\x9b\xeb\x42\x13\xbb\xd4\xf0\xba\x4a\xcf\x4c\x6e\x07\x68\x04\xb7\x18\x1a\xc9\x2d\x8c\xa5\xd9\x68\xff\x86\x17\x33\xfe\xcf\xd9\x6b\xa2\x5c\x56\xac\x1c\x4f\xd9\x69\x7d\x8d\xed\x00\xc4\x51\x75\x4f\x2e\xab\xc9\xc4\xbe\x85\x23\xb9\x2d\xc8\x28\x9e\x4c\xdb\x6e\xe1\xd0\x51\x9c\x3e\xce\xb5\xd3\x6a\xf7\x90\xfc\x04\x00\x00\xff\xff\x1a\x15\xdc\x7a\xe7\x03\x00\x00")

func migrations_compliance01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_compliance01_initSql,
		"migrations_compliance/01_init.sql",
	)
}

func migrations_compliance01_initSql() (*asset, error) {
	bytes, err := migrations_compliance01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_compliance/01_init.sql", size: 999, mode: os.FileMode(420), modTime: time.Unix(1472227636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations_gateway/01_init.sql": migrations_gateway01_initSql,
	"migrations_compliance/01_init.sql": migrations_compliance01_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations_compliance": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_compliance01_initSql, map[string]*bintree{}},
	}},
	"migrations_gateway": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_gateway01_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

