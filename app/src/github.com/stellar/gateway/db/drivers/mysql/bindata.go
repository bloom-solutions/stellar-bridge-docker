// Code generated by go-bindata.
// sources:
// migrations_gateway/01_init.sql
// migrations_compliance/01_init.sql
// DO NOT EDIT!

package mysql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations_gateway01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x41\x6f\xe2\x30\x10\x85\xef\xf9\x15\x73\x4c\xb4\x8b\xb4\xa0\x05\x55\x42\x1c\x02\x71\xdb\xa8\x21\xd0\xe0\x1c\x38\x25\x26\x99\xa6\x56\x89\x83\x1c\x87\xd2\x7f\x5f\x87\xaa\xa5\x31\x2a\x6d\x8f\xb6\xbf\x79\x9e\x79\x4f\xd3\xeb\xc1\x9f\x92\x17\x92\x29\x84\x78\x67\xcd\x22\xe2\x52\x02\xd4\x9d\x06\x04\xd2\x08\x33\xe4\x7b\xcc\x97\xec\xa5\x44\xa1\x52\xb0\x2d\x80\x94\xe7\x29\x70\xa1\xec\x7e\xdf\x81\x70\x41\x21\x8c\x83\x00\xdc\x98\x2e\x12\x3f\xd4\xf5\x73\x12\xd2\xbf\x2d\x57\xed\x50\xcb\xf2\x4a\x24\x6d\xc5\x9e\xc9\xec\x91\x49\x7b\x30\x1c\x9e\xca\x8e\xdc\x4e\x56\x19\xd6\x35\xe6\x09\xd3\x5f\xe4\xba\x13\xc5\x4b\x34\x18\x56\x70\x51\x24\xaa\x7a\x42\x71\x49\xab\x56\x4c\x35\xf5\x05\x62\x19\xf9\x73\x37\x5a\xc3\x1d\x59\x83\xdd\x8e\xe2\xb4\xb7\x71\xe8\xdf\xc7\xe4\x78\x69\xb4\x6d\x77\xcf\x8e\xe5\x00\x09\x6f\xfc\x90\x4c\x7c\x21\x2a\x6f\x0a\x1e\xb9\x76\xe3\x80\xc2\xec\xd6\x8d\x56\x84\x4e\x1a\xf5\x70\x35\xb6\x0c\x23\x57\xda\x3d\x2a\x99\xa8\x59\xd6\x2a\xfd\xd2\x48\x75\xaa\xec\x58\x39\xfa\xff\xcd\xf4\xfd\x7f\x26\x50\x35\x32\xc3\x13\x30\x1c\x99\x40\xb3\x29\xb9\x52\x17\xb3\xa8\x9b\x2c\x43\xcc\x4d\xe6\xdd\x88\x0f\x6e\x8b\x79\x81\x32\x85\x0d\x2f\xda\x29\x07\xba\x99\x33\x06\xc5\x1e\xb7\xda\xe1\xe4\x90\x6b\x52\xe1\x41\x75\xff\x92\x58\x37\x5b\xf5\xf6\xda\xc9\xd4\x54\x3a\xcf\xf5\xa7\x49\x7d\xde\x00\xaf\x7a\x16\x96\x17\x2d\x96\x5f\x6d\xc0\xb8\xf3\x6a\xc6\x3a\xb6\x5e\x03\x00\x00\xff\xff\x83\xe1\xb3\xac\x4f\x03\x00\x00")

func migrations_gateway01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_gateway01_initSql,
		"migrations_gateway/01_init.sql",
	)
}

func migrations_gateway01_initSql() (*asset, error) {
	bytes, err := migrations_gateway01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_gateway/01_init.sql", size: 847, mode: os.FileMode(420), modTime: time.Unix(1472146842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations_compliance01_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\x4d\x53\xc2\x30\x10\x86\xef\xfd\x15\x7b\x2c\x23\x1c\x70\x84\x71\x86\xe1\x50\x68\xd0\x8e\xa5\x60\x4d\x0f\x9c\xda\x48\x83\x64\xa4\x09\x13\x52\x41\x7f\xbd\x6d\xd5\x7e\xf1\x25\xa3\x37\xd8\x3e\xbb\x7d\xf7\x69\x26\xad\x16\x5c\x45\xec\x45\x12\x45\xc1\x5b\x6b\x43\x17\x19\x18\x01\x36\x06\x36\x82\xc0\x88\xd5\x52\x48\xf6\x41\x43\x2c\x09\xdf\x90\xb9\x62\x82\x07\xa0\x6b\x00\x01\x0b\x03\x60\x5c\xe9\xed\x76\x03\x9c\x09\x06\xc7\xb3\x6d\x30\x3c\x3c\xf1\x2d\x27\x99\x32\x46\x0e\x6e\xa6\x9c\x2a\x3a\xfd\xb4\x67\xbe\x24\x52\xef\xde\x14\x4d\x19\x15\xd1\x48\x04\xf0\x46\xe4\xe1\xc7\xe5\x21\xbb\x50\x06\xa0\xe8\x4e\x55\x11\x92\x67\xf5\x89\x0a\x20\x4c\x16\x52\x2c\xa2\x55\x28\xa9\x92\x03\xcd\x53\xd7\x1a\x1b\xee\x0c\x1e\xd0\x0c\xf4\x74\xb3\x86\xd6\x00\xe4\xdc\x59\x0e\xea\x5b\x9c\x0b\x73\x00\x26\x1a\x19\x9e\x8d\x61\x78\x6f\xb8\x4f\x08\xf7\x63\xb5\xb8\xed\x69\x75\x5f\xab\x95\xd8\xd2\x70\x64\x5d\xe8\x88\x93\x88\x16\xdb\x5f\x77\x3a\xb5\xf5\x43\x11\x11\xc6\x4f\x11\xeb\xf8\x79\xc5\xe6\xfe\x2b\x7d\xff\x36\xdc\xe9\xd6\x08\xf2\x95\xed\xb8\x9c\x7d\x09\x69\xd5\x73\xac\x47\x0f\x65\xc5\x3c\x86\xfe\xf3\x6b\x8f\x28\xc7\xd0\xcb\xff\xfe\x26\xd4\xdb\x50\x79\xa1\xd2\x05\xf3\xcf\x59\x4d\x90\xf3\x62\x13\xe8\xbc\xdb\x38\xc9\x97\x1d\xee\xe3\x73\xfe\x41\x7f\x25\x8a\x9f\xbf\x53\xaf\x65\x6c\x16\x79\x7e\x6d\xbd\x7c\x0b\x98\x62\xcb\x35\xd3\x9d\x4c\x4f\xdf\x02\xbd\x2a\x93\x9f\xfc\x83\xf5\xec\x03\xf6\xb4\xcf\x00\x00\x00\xff\xff\xb0\xd9\x8a\xda\x6d\x04\x00\x00")

func migrations_compliance01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_compliance01_initSql,
		"migrations_compliance/01_init.sql",
	)
}

func migrations_compliance01_initSql() (*asset, error) {
	bytes, err := migrations_compliance01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_compliance/01_init.sql", size: 1133, mode: os.FileMode(420), modTime: time.Unix(1472146842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations_gateway/01_init.sql": migrations_gateway01_initSql,
	"migrations_compliance/01_init.sql": migrations_compliance01_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations_compliance": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_compliance01_initSql, map[string]*bintree{}},
	}},
	"migrations_gateway": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations_gateway01_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

